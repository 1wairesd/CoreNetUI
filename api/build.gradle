plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'com.wairesd.discordbm'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly("org.jetbrains:annotations:26.0.2")
    compileOnly("org.projectlombok:lombok:1.18.32")

    compileOnly("net.kyori:event-method:3.0.0")
    compileOnly("com.google.guava:guava:33.4.8-jre")
    compileOnly("org.checkerframework:checker-qual:3.42.0")


    compileOnly("org.projectlombok:lombok:1.18.32")
    annotationProcessor("org.projectlombok:lombok:1.18.32")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.13.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.13.1")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'api'
            from components.java
        }
    }

    repositories {
        maven {
            // Публикация в локальный Maven репозиторий для тестирования
            name = 'localRepo'
            url = layout.buildDirectory.dir("repo")
        }

        // Для публикации в удаленный репозиторий (раскомментируйте и настройте)
        /*
        maven {
            name = 'yourRemoteRepo'
            url = "https://your-maven-repo-url"
            credentials {
                username = project.findProperty("mavenUsername") ?: System.getenv("MAVEN_USERNAME")
                password = project.findProperty("mavenPassword") ?: System.getenv("MAVEN_PASSWORD")
            }
        }
        */
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}